{"version":3,"sources":["/source/src/backbone.eventrouter.js"],"names":["namedParamRegex","EventRouter","Backbone","Router","extend","constructor","options","_","this","pick","_ch","Radio","channel","result","listenTo","navigateFromEvent","apply","arguments","_initRoutes","channelName","getChannel","_routeTriggers","each","_addRouteTrigger","routes","event","isArray","route","bind","trigger","addRouteTrigger","name","callback","bbRoute","prototype","isFunction","call","wrappedCallback","args","drop","concat","_storeRouteTrigger","_clearRouteTrigger","_routeArgs","push","_getCurrentRouteTrigger","last","pop","_isTriggeredFromRoute","currentRoute","length","union","getDefaultRoute","eventArgs","translatedRoute","translateRoute","navigate","_replaceParam","arg","replace","reduce"],"mappings":";;;;;;4ZAKA,IAAMA,GAAkB,cASlBC,EAAcC,EAASD,YAAcC,EAASC,OAAOC,QASzDC,YATgE,SASpDC,GACVC,EAAEH,OAAOI,KAAMD,EAAEE,KAAKH,GAAU,cAAe,mBAE/CE,KAAKE,IAAMR,EAASS,MAAMC,QAAQL,EAAEM,OAAOL,KAAM,gBAEjDA,KAAKM,SAASN,KAAKE,IAAK,MAAOF,KAAKO,mBAIpCb,EAASC,OAAOa,MAAMR,KAAMS,WAE5BT,KAAKU,eASPC,YAAa,eAUbC,WAvCgE,WAwC9D,MAAOZ,MAAKE,KAUdQ,YAlDgE,WAmD9DV,KAAKa,eAAiBd,EAAEM,OAAOL,KAAM,oBAErCD,EAAEe,KAAKd,KAAKa,eAAgBb,KAAKe,iBAAkBf,OAarDe,iBAlEgE,SAkE/CC,EAAQC,GAEvBD,EAASjB,EAAEmB,QAAQF,GAAUA,GAAUA,GAEvCjB,EAAEe,KAAKE,EAAQ,SAASG,GACtBnB,KAAKmB,MAAMA,EAAOF,EAAOlB,EAAEqB,KAAKpB,KAAKE,IAAImB,QAASrB,KAAKE,IAAKe,KAC3DjB,OAcLsB,gBAtFgE,SAsFhDN,EAAQC,GAItB,MAHAjB,MAAKa,eAAeI,GAASD,EAC7BhB,KAAKe,iBAAiBC,EAAQC,GAEvBjB,MAmBTmB,MA7GgE,SA6G1DA,EAAOI,EAAMC,GACjB,GAAMC,GAAU/B,EAASC,OAAO+B,UAAUP,KAE1C,IAAGpB,EAAE4B,WAAWJ,KAAUC,EACxB,MAAOC,GAAQG,KAAK5B,KAAMmB,EAAOI,EAAMC,EAGzC,IAAMK,GAAkB9B,EAAEqB,KAAK,WAC7B,GAAMU,GAAO/B,EAAEgC,KAAKtB,UAAW,EAG/BT,MAAKqB,QAAQ,eAAgBE,EAAMO,GACnC9B,KAAKqB,QAAQb,MAAMR,MAAM,gBAAkBuB,GAASS,OAAOF,IAE3D9B,KAAKiC,oBAAoBV,GAAMS,OAAOF,IACtCN,EAAShB,MAAMR,KAAM8B,GACrB9B,KAAKkC,sBACJlC,KAEH,OAAOyB,GAAQG,KAAK5B,KAAMmB,EAAOI,EAAMM,IAWzCI,mBA3IgE,SA2I7CH,GACjB9B,KAAKmC,WAAanC,KAAKmC,eACvBnC,KAAKmC,WAAWC,KAAKN,IAYvBO,wBAzJgE,WA0J9D,MAAOtC,GAAEuC,KAAKtC,KAAKmC,iBAUrBD,mBApKgE,WAqK9DlC,KAAKmC,WAAWI,OAYlBC,sBAjLgE,WAkL9D,GAAMC,GAAezC,KAAKqC,yBAE1B,OAAG5B,WAAUiC,SAAWD,EAAaC,QAI7BjC,UAAUiC,SAAW3C,EAAE4C,MAAMlC,UAAWT,KAAKyC,cAAcC,QAerEnC,kBAvMgE,SAuM9CU,GAChB,GAAME,GAAQnB,KAAK4C,gBAAgB3B,EAGnC,KAAIE,EAAO,CACT,GAAMW,GAAO/B,EAAEgC,KAAKtB,UAAW,EAE/B,OADAT,MAAKqB,QAAQb,MAAMR,MAAO,WAAWgC,OAAOF,IACrC9B,KAGT,GAAGA,KAAKwC,sBAAsBhC,MAAMR,KAAMS,WACxC,MAAOT,KAGT,IAAM6C,GAAY9C,EAAEgC,KAAKtB,UAAW,GAE9BqC,EAAkB9C,KAAK+C,eAAe5B,EAAO0B,EAGnD,OAAO7C,MAAKgD,SAASF,GAAmBzB,SAAS,KAYnDuB,gBAtOgE,SAsOhD3B,GACd,GAAMD,GAAShB,KAAKa,eAAeI,EAEnC,OAAOlB,GAAEmB,QAAQF,GAAUA,EAAO,GAAKA,GAazCiC,cAtPgE,SAsPlD9B,EAAO+B,GACnB,MAAO/B,GAAMgC,QAAQ3D,EAAiB0D,IAcxCH,eArQgE,SAqQjD5B,EAAO0B,GACpB,MAAO9C,GAAEqD,OAAOP,EAAW7C,KAAKiD,cAAe9B","file":"backbone.eventrouter.min.js","sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Radio from 'backbone.radio'; // eslint-disable-line\n\n// https://github.com/jashkenas/backbone/blob/1.2.1/backbone.js#L1425\nconst namedParamRegex = /(\\(\\?)?:\\w+/;\n\n/**\n * Backbone.Router coupled with a Backbone.Radio Channel.\n *\n * @public\n * @class EventRouter\n * @memberOf Backbone\n */\nconst EventRouter = Backbone.EventRouter = Backbone.Router.extend({\n\n  /**\n   * @public\n   * @constructs EventRouter\n   * @param {Object} [options] - Settings for the EventRouter\n   * @param {Boolean} [options.channelName]\n   * @param {Boolean} [options.routeTriggers]\n   */\n  constructor(options) {\n    _.extend(this, _.pick(options, ['channelName', 'routeTriggers']));\n\n    this._ch = Backbone.Radio.channel(_.result(this, 'channelName'));\n\n    this.listenTo(this._ch, 'all', this.navigateFromEvent);\n\n    // Backbone.Router routes are added first\n    // Routes can be added after the triggerRoutes with the Backbone.Router API\n    Backbone.Router.apply(this, arguments);\n\n    this._initRoutes();\n  },\n\n  /**\n   * The Radio Channel name.\n   *\n   * @type {String}\n   * @default 'event-router'\n   */\n  channelName: 'event-router',\n\n  /**\n   * Get the router's Radio channel instance\n   *\n   * @public\n   * @method getChannel\n   * @memberOf EventRouter\n   * @returns {Backbone.Radio.Channel}\n   */\n  getChannel() {\n    return this._ch;\n  },\n\n  /**\n   * For each routeTrigger it adds a route to Backbone.Router\n   *\n   * @private\n   * @method _initRoutes\n   * @memberOf EventRouter\n   */\n  _initRoutes() {\n    this._routeTriggers = _.result(this, 'routeTriggers', {});\n\n    _.each(this._routeTriggers, this._addRouteTrigger, this);\n  },\n\n  /**\n   * Adds a route(s) to Backbone.Router which on route triggers\n   * the appropriate event\n   *\n   * @private\n   * @method _addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   */\n  _addRouteTrigger(routes, event) {\n    // handle any route as an array by default for the _.each\n    routes = _.isArray(routes) ? routes : [routes];\n\n    _.each(routes, function(route) {\n      this.route(route, event, _.bind(this._ch.trigger, this._ch, event));\n    }, this);\n  },\n\n  /**\n   * Adds a routeTrigger, and route(s) to Backbone.Router\n   * which on route triggers the appropriate event.\n   *\n   * @public\n   * @method addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  addRouteTrigger(routes, event) {\n    this._routeTriggers[event] = routes;\n    this._addRouteTrigger(routes, event);\n\n    return this;\n  },\n\n  /**\n   * Overrides `Backbone.Router.route()\n   * Like Backbone.Router.Route but with before events\n   * It also temporarily stores the event for understanding\n   * what route is currently being handled.\n   *\n   * @public\n   * @method route\n   * @param {String} route - Route string\n   * @param {String} [name] - Name of route\n   * @param {String} callback - Function called on route\n   * @event EventRouter#before:route - passes route name and route arguments\n   * @event EventRouter#before:route:{event_name} - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  route(route, name, callback) {\n    const bbRoute = Backbone.Router.prototype.route;\n\n    if(_.isFunction(name) || !callback) {\n      return bbRoute.call(this, route, name, callback);\n    }\n\n    const wrappedCallback = _.bind(function() {\n      const args = _.drop(arguments, 0);\n\n      // Trigger before: events that match currently triggered events\n      this.trigger('before:route', name, args);\n      this.trigger.apply(this, [`before:route:${ name }`].concat(args));\n\n      this._storeRouteTrigger([name].concat(args));\n      callback.apply(this, args);\n      this._clearRouteTrigger();\n    }, this);\n\n    return bbRoute.call(this, route, name, wrappedCallback);\n  },\n\n  /**\n   * Stores the route name and route arguments on a stack\n   *\n   * @private\n   * @method _storeRouteTrigger\n   * @param {Array} args - Array of route name and route arguments\n   * @memberOf EventRouter\n   */\n  _storeRouteTrigger(args) {\n    this._routeArgs = this._routeArgs || [];\n    this._routeArgs.push(args);\n  },\n\n\n  /**\n   * Gets the top of the triggered route store stack\n   *\n   * @private\n   * @method _getCurrentRouteTrigger\n   * @memberOf EventRouter\n   * @returns {Array}\n   */\n  _getCurrentRouteTrigger() {\n    return _.last(this._routeArgs) || [];\n  },\n\n  /**\n   * Pops the latests route triggered off of the store stack\n   *\n   * @private\n   * @method _clearRouteTrigger\n   * @memberOf EventRouter\n   */\n  _clearRouteTrigger() {\n    this._routeArgs.pop();\n  },\n\n  /**\n   * Checks to see if the current event being tests is the latest\n   * route being handled by comparing the route name and arguments\n   *\n   * @private\n   * @method _isTriggeredFromRoute\n   * @memberOf EventRouter\n   * @returns {Boolean}\n   */\n  _isTriggeredFromRoute() {\n    const currentRoute = this._getCurrentRouteTrigger();\n\n    if(arguments.length !== currentRoute.length) {\n      return false;\n    }\n\n    return (arguments.length === _.union(arguments, this.currentRoute).length);\n  },\n\n  /**\n   * Takes a event string and any arguments passed to that event\n   * And if not initiated by a route, translates the event into a\n   * URL and navigates to it without re-triggering the route\n   *\n   * @public\n   * @method navigateFromEvent\n   * @param {String} event - Event string\n   * @event EventRouter#noMatch - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  navigateFromEvent(event) {\n    const route = this.getDefaultRoute(event);\n\n    // if no matching route exists do nothing\n    if(!route) {\n      const args = _.drop(arguments, 0);\n      this.trigger.apply(this, ['noMatch'].concat(args));\n      return this;\n    }\n\n    if(this._isTriggeredFromRoute.apply(this, arguments)) {\n      return this;\n    }\n\n    const eventArgs = _.drop(arguments, 1);\n\n    const translatedRoute = this.translateRoute(route, eventArgs);\n\n    // update URL without triggering the route\n    return this.navigate(translatedRoute, { trigger: false });\n  },\n\n  /**\n   * Get the default route string\n   * Either the first of the array or the passed in event if singular\n   *\n   * @public\n   * @method getDefaultRoute\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  getDefaultRoute(event) {\n    const routes = this._routeTriggers[event];\n\n    return _.isArray(routes) ? routes[0] : routes;\n  },\n\n  /**\n   * Finds the next name params (ie: :param) and replaces it with the arg\n   *\n   * @private\n   * @method _replaceParam\n   * @param {String} route - Route string\n   * @param {String|Number} arg - value to replace named param\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  _replaceParam(route, arg) {\n    return route.replace(namedParamRegex, arg);\n  },\n\n  /**\n   * Takes a route string and an array or arguments\n   * and returns a url with the named params replaced with the argument values\n   *\n   * @public\n   * @method translateRoute\n   * @param {String} route - Route string\n   * @param {Array} eventArgs - Passed event arguments\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  translateRoute(route, eventArgs) {\n    return _.reduce(eventArgs, this._replaceParam, route);\n  }\n});\n\nexport default EventRouter;\n"],"sourceRoot":"/source/"}