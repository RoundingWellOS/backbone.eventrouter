{"version":3,"sources":["/source/src/backbone.eventrouter.js"],"names":["EventRouter","Backbone","Router","extend","constructor","options","_","apply","this","arguments","pick","_ch","Radio","channel","result","_initRoutes","listenTo","navigateFromEvent","channelName","getChannel","_routeTriggers","each","_addRouteTrigger","routes","event","isArray","route","bind","trigger","addRouteTrigger","name","callback","isFunction","wrappedCallback","args","drop","concat","_storeRouteTrigger","_clearRouteTrigger","prototype","call","_routeArgs","push","_getCurrentRouteTrigger","last","pop","_isTriggeredFromRoute","currentRoute","length","union","getDefaultRoute","eventArgs","translatedRoute","translateRoute","navigate","_replaceParam","arg","namedParam","replace","reduce"],"mappings":";;;;;;4ZAWA,IAAMA,GAAcC,EAASD,YAAcC,EAASC,OAAOC,QASzDC,YAAa,SAASC,GACpBA,EAAUC,EAAEH,UAAWE,GAIvBJ,EAASC,OAAOK,MAAMC,KAAMC,WAE5BH,EAAEH,OAAOK,KAAMF,EAAEI,KAAKL,GAAU,cAAe,mBAE/CG,KAAKG,IAAMV,EAASW,MAAMC,QAAQP,EAAEQ,OAAON,KAAM,gBAEjDA,KAAKO,cAELP,KAAKQ,SAASR,KAAKG,IAAK,MAAOH,KAAKS,oBAStCC,YAAa,eAUbC,WAAY,WACV,MAAOX,MAAKG,KAUdI,YAAa,WACXP,KAAKY,eAAiBd,EAAEQ,OAAON,KAAM,qBAErCF,EAAEe,KAAKb,KAAKY,eAAgBZ,KAAKc,iBAAkBd,OAarDc,iBAAkB,SAASC,EAAQC,GAEjCD,EAASjB,EAAEmB,QAAQF,GAAUA,GAAUA,GAEvCjB,EAAEe,KAAKE,EAAQ,SAASG,GACtBlB,KAAKkB,MAAMA,EAAOF,EAAOlB,EAAEqB,KAAKnB,KAAKG,IAAIiB,QAASpB,KAAKG,IAAKa,KAC3DhB,OAcLqB,gBAAiB,SAASN,EAAQC,GAIhC,MAHAhB,MAAKY,eAAeI,GAASD,EAC7Bf,KAAKc,iBAAiBC,EAAQC,GAEvBhB,MAmBTkB,MAAO,SAASA,EAAOI,EAAMC,GACxBzB,EAAE0B,WAAWF,KACdC,EAAWD,EACXA,EAAO,IAELC,IACFA,EAAWvB,KAAKsB,GAGlB,IAAMG,GAAkB3B,EAAEqB,KAAK,WAC7B,GAAMO,GAAO5B,EAAE6B,KAAK1B,UAAW,EAG/BD,MAAKoB,QAAQ,eAAgBE,EAAMI,GACnC1B,KAAKoB,QAAQrB,MAAMC,MAAM,gBAAkBsB,GAASM,OAAOF,IAE3D1B,KAAK6B,oBAAoBP,GAAMM,OAAOF,IACtCH,EAASxB,MAAMC,KAAM0B,GACrB1B,KAAK8B,sBACJ9B,KAEH,OAAOP,GAASC,OAAOqC,UAAUb,MAAMc,KAAKhC,KAAMkB,EAAOI,EAAMG,IAWjEI,mBAAoB,SAASH,GAC3B1B,KAAKiC,WAAajC,KAAKiC,eACvBjC,KAAKiC,WAAWC,KAAKR,IAYvBS,wBAAyB,WACvB,MAAOrC,GAAEsC,KAAKpC,KAAKiC,iBAUrBH,mBAAoB,WAClB9B,KAAKiC,WAAWI,OAYlBC,sBAAuB,WACrB,GAAMC,GAAevC,KAAKmC,yBAE1B,OAAGlC,WAAUuC,SAAWD,EAAaC,QAI7BvC,UAAUuC,SAAW1C,EAAE2C,MAAMxC,UAAWD,KAAKuC,cAAcC,QAerE/B,kBAAmB,SAASO,GAC1B,GAAME,GAAQlB,KAAK0C,gBAAgB1B,EAGnC,KAAIE,EAAO,CACT,GAAMQ,GAAO5B,EAAE6B,KAAK1B,UAAW,EAE/B,OADAD,MAAKoB,QAAQrB,MAAMC,MAAO,WAAW4B,OAAOF,IACrC1B,KAGT,GAAGA,KAAKsC,sBAAsBvC,MAAMC,KAAMC,WACxC,MAAOD,KAGT,IAAM2C,GAAY7C,EAAE6B,KAAK1B,UAAW,GAE9B2C,EAAkB5C,KAAK6C,eAAe3B,EAAOyB,EAGnD,OAAO3C,MAAK8C,SAASF,GAAmBxB,SAAS,KAYnDsB,gBAAiB,SAAS1B,GACxB,GAAMD,GAASf,KAAKY,eAAeI,EAEnC,OAAOlB,GAAEmB,QAAQF,GAAUA,EAAO,GAAKA,GAazCgC,cAAe,SAAS7B,EAAO8B,GAE7B,GAAMC,GAAa,aAEnB,OAAO/B,GAAMgC,QAAQD,EAAYD,IAcnCH,eAAgB,SAAS3B,EAAOyB,GAC9B,MAAO7C,GAAEqD,OAAOR,EAAW3C,KAAK+C,cAAe7B","file":"backbone.eventrouter.min.js","sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Radio from 'backbone.radio'; // eslint-disable-line\n\n/**\n * Backbone.Router coupled with a Backbone.Radio Channel.\n *\n * @public\n * @class EventRouter\n * @memberOf Backbone\n */\nconst EventRouter = Backbone.EventRouter = Backbone.Router.extend({\n\n  /**\n   * @public\n   * @constructs EventRouter\n   * @param {Object} [options] - Settings for the EventRouter\n   * @param {Boolean} [options.channelName]\n   * @param {Boolean} [options.routeTriggers]\n   */\n  constructor: function(options) {\n    options = _.extend({}, options);\n\n    // Backbone.Router routes are added first\n    // Routes can be added after the triggerRoutes with the Backbone.Router API\n    Backbone.Router.apply(this, arguments);\n\n    _.extend(this, _.pick(options, ['channelName', 'routeTriggers']));\n\n    this._ch = Backbone.Radio.channel(_.result(this, 'channelName'));\n\n    this._initRoutes();\n\n    this.listenTo(this._ch, 'all', this.navigateFromEvent);\n  },\n\n  /**\n   * The Radio Channel name.\n   *\n   * @type {String}\n   * @default 'event-router'\n   */\n  channelName: 'event-router',\n\n  /**\n   * Get the router's Radio channel instance\n   *\n   * @public\n   * @method getChannel\n   * @memberOf EventRouter\n   * @returns {Backbone.Radio.Channel}\n   */\n  getChannel: function() {\n    return this._ch;\n  },\n\n  /**\n   * For each routeTrigger it adds a route to Backbone.Router\n   *\n   * @private\n   * @method _initRoutes\n   * @memberOf EventRouter\n   */\n  _initRoutes: function() {\n    this._routeTriggers = _.result(this, 'routeTriggers') || {};\n\n    _.each(this._routeTriggers, this._addRouteTrigger, this);\n  },\n\n  /**\n   * Adds a route(s) to Backbone.Router which on route triggers\n   * the appropriate event\n   *\n   * @private\n   * @method _addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   */\n  _addRouteTrigger: function(routes, event) {\n    // handle any route as an array by default for the _.each\n    routes = _.isArray(routes) ? routes : [routes];\n\n    _.each(routes, function(route) {\n      this.route(route, event, _.bind(this._ch.trigger, this._ch, event));\n    }, this);\n  },\n\n  /**\n   * Adds a routeTrigger, and route(s) to Backbone.Router\n   * which on route triggers the appropriate event.\n   *\n   * @public\n   * @method addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  addRouteTrigger: function(routes, event) {\n    this._routeTriggers[event] = routes;\n    this._addRouteTrigger(routes, event);\n\n    return this;\n  },\n\n  /**\n   * Overrides `Backbone.Router.route()\n   * Like Backbone.Router.Route but with before events\n   * It also temporarily stores the event for understanding\n   * what route is currently being handled.\n   *\n   * @public\n   * @method route\n   * @param {String} route - Route string\n   * @param {String} [name] - Name of route\n   * @param {String} callback - Function called on route\n   * @event EventRouter#before:route - passes route name and route arguments\n   * @event EventRouter#before:route:{event_name} - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  route: function(route, name, callback) {\n    if(_.isFunction(name)) {\n      callback = name;\n      name = '';\n    }\n    if(!callback) {\n      callback = this[name];\n    }\n\n    const wrappedCallback = _.bind(function() {\n      const args = _.drop(arguments, 0);\n\n      // Trigger before: events that match currently triggered events\n      this.trigger('before:route', name, args);\n      this.trigger.apply(this, [`before:route:${ name }`].concat(args));\n\n      this._storeRouteTrigger([name].concat(args));\n      callback.apply(this, args);\n      this._clearRouteTrigger();\n    }, this);\n\n    return Backbone.Router.prototype.route.call(this, route, name, wrappedCallback);\n  },\n\n  /**\n   * Stores the route name and route arguments on a stack\n   *\n   * @private\n   * @method _storeRouteTrigger\n   * @param {Array} args - Array of route name and route arguments\n   * @memberOf EventRouter\n   */\n  _storeRouteTrigger: function(args) {\n    this._routeArgs = this._routeArgs || [];\n    this._routeArgs.push(args);\n  },\n\n\n  /**\n   * Gets the top of the triggered route store stack\n   *\n   * @private\n   * @method _getCurrentRouteTrigger\n   * @memberOf EventRouter\n   * @returns {Array}\n   */\n  _getCurrentRouteTrigger: function() {\n    return _.last(this._routeArgs) || [];\n  },\n\n  /**\n   * Pops the latests route triggered off of the store stack\n   *\n   * @private\n   * @method _clearRouteTrigger\n   * @memberOf EventRouter\n   */\n  _clearRouteTrigger: function() {\n    this._routeArgs.pop();\n  },\n\n  /**\n   * Checks to see if the current event being tests is the latest\n   * route being handled by comparing the route name and arguments\n   *\n   * @private\n   * @method _isTriggeredFromRoute\n   * @memberOf EventRouter\n   * @returns {Boolean}\n   */\n  _isTriggeredFromRoute: function() {\n    const currentRoute = this._getCurrentRouteTrigger();\n\n    if(arguments.length !== currentRoute.length) {\n      return false;\n    }\n\n    return (arguments.length === _.union(arguments, this.currentRoute).length);\n  },\n\n  /**\n   * Takes a event string and any arguments passed to that event\n   * And if not initiated by a route, translates the event into a\n   * URL and navigates to it without re-triggering the route\n   *\n   * @public\n   * @method navigateFromEvent\n   * @param {String} event - Event string\n   * @event EventRouter#noMatch - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  navigateFromEvent: function(event) {\n    const route = this.getDefaultRoute(event);\n\n    // if no matching route exists do nothing\n    if(!route) {\n      const args = _.drop(arguments, 0);\n      this.trigger.apply(this, ['noMatch'].concat(args));\n      return this;\n    }\n\n    if(this._isTriggeredFromRoute.apply(this, arguments)) {\n      return this;\n    }\n\n    const eventArgs = _.drop(arguments, 1);\n\n    const translatedRoute = this.translateRoute(route, eventArgs);\n\n    // update URL without triggering the route\n    return this.navigate(translatedRoute, { trigger: false });\n  },\n\n  /**\n   * Get the default route string\n   * Either the first of the array or the passed in event if singular\n   *\n   * @public\n   * @method getDefaultRoute\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  getDefaultRoute: function(event) {\n    const routes = this._routeTriggers[event];\n\n    return _.isArray(routes) ? routes[0] : routes;\n  },\n\n  /**\n   * Finds the next name params (ie: :param) and replaces it with the arg\n   *\n   * @private\n   * @method _replaceParam\n   * @param {String} route - Route string\n   * @param {String|Number} arg - value to replace named param\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  _replaceParam: function(route, arg) {\n    // https://github.com/jashkenas/backbone/blob/1.2.1/backbone.js#L1425\n    const namedParam = /(\\(\\?)?:\\w+/;\n\n    return route.replace(namedParam, arg);\n  },\n\n  /**\n   * Takes a route string and an array or arguments\n   * and returns a url with the named params replaced with the argument values\n   *\n   * @public\n   * @method translateRoute\n   * @param {String} route - Route string\n   * @param {Array} eventArgs - Passed event arguments\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  translateRoute: function(route, eventArgs) {\n    return _.reduce(eventArgs, this._replaceParam, route);\n  }\n});\n\nexport default EventRouter;\n"],"sourceRoot":"/source/"}