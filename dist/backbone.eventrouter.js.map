{"version":3,"file":"backbone.eventrouter.js","sources":["src/backbone.eventrouter.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Radio from 'backbone.radio'; // eslint-disable-line\n\n// https://github.com/jashkenas/backbone/blob/1.2.1/backbone.js#L1425\nconst namedParamRegex = /(\\(\\?)?:\\w+/;\n\n/**\n * Backbone.Router coupled with a Backbone.Radio Channel.\n *\n * @public\n * @class EventRouter\n * @memberOf Backbone\n */\nconst EventRouter = Backbone.EventRouter = Backbone.Router.extend({\n\n  /**\n   * @public\n   * @constructs EventRouter\n   * @param {Object} [options] - Settings for the EventRouter\n   * @param {Boolean} [options.channelName]\n   * @param {Boolean} [options.routeTriggers]\n   */\n  constructor(options) {\n    _.extend(this, _.pick(options, ['channelName', 'routeTriggers']));\n\n    this._ch = Backbone.Radio.channel(_.result(this, 'channelName'));\n\n    this.listenTo(this._ch, 'all', this.navigateFromEvent);\n\n    // Backbone.Router routes are added first\n    // Routes can be added after the triggerRoutes with the Backbone.Router API\n    Backbone.Router.apply(this, arguments);\n\n    this._initRoutes();\n  },\n\n  /**\n   * The Radio Channel name.\n   *\n   * @type {String}\n   * @default 'event-router'\n   */\n  channelName: 'event-router',\n\n  /**\n   * Get the router's Radio channel instance\n   *\n   * @public\n   * @method getChannel\n   * @memberOf EventRouter\n   * @returns {Backbone.Radio.Channel}\n   */\n  getChannel() {\n    return this._ch;\n  },\n\n  /**\n   * For each routeTrigger it adds a route to Backbone.Router\n   *\n   * @private\n   * @method _initRoutes\n   * @memberOf EventRouter\n   */\n  _initRoutes() {\n    this._routeTriggers = _.result(this, 'routeTriggers', {});\n\n    _.each(this._routeTriggers, this._addRouteTrigger, this);\n  },\n\n  /**\n   * Adds a route(s) to Backbone.Router which on route triggers\n   * the appropriate event\n   *\n   * @private\n   * @method _addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   */\n  _addRouteTrigger(routes, event) {\n    // handle any route as an array by default for the _.each\n    routes = _.isArray(routes) ? routes : [routes];\n\n    _.each(routes, function(route) {\n      this.route(route, event, _.bind(this._ch.trigger, this._ch, event));\n    }, this);\n  },\n\n  /**\n   * Adds a routeTrigger, and route(s) to Backbone.Router\n   * which on route triggers the appropriate event.\n   *\n   * @public\n   * @method addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  addRouteTrigger(routes, event) {\n    this._routeTriggers[event] = routes;\n    this._addRouteTrigger(routes, event);\n\n    return this;\n  },\n\n  /**\n   * Overrides `Backbone.Router.route()\n   * Like Backbone.Router.Route but with before events\n   * It also temporarily stores the event for understanding\n   * what route is currently being handled.\n   *\n   * @public\n   * @method route\n   * @param {String} route - Route string\n   * @param {String} [name] - Name of route\n   * @param {String} callback - Function called on route\n   * @event EventRouter#before:route - passes route name and route arguments\n   * @event EventRouter#before:route:{event_name} - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  route(route, name, callback) {\n    const bbRoute = Backbone.Router.prototype.route;\n\n    if(_.isFunction(name) || !callback) {\n      return bbRoute.call(this, route, name, callback);\n    }\n\n    const wrappedCallback = _.bind(function() {\n      const args = _.drop(arguments, 0);\n\n      // Trigger before: events that match currently triggered events\n      this.trigger('before:route', name, args);\n      this.trigger.apply(this, [`before:route:${ name }`].concat(args));\n\n      this._storeRouteTrigger([name].concat(args));\n      callback.apply(this, args);\n      this._clearRouteTrigger();\n    }, this);\n\n    return bbRoute.call(this, route, name, wrappedCallback);\n  },\n\n  /**\n   * Stores the route name and route arguments on a stack\n   *\n   * @private\n   * @method _storeRouteTrigger\n   * @param {Array} args - Array of route name and route arguments\n   * @memberOf EventRouter\n   */\n  _storeRouteTrigger(args) {\n    this._routeArgs = this._routeArgs || [];\n    this._routeArgs.push(args);\n  },\n\n\n  /**\n   * Gets the top of the triggered route store stack\n   *\n   * @private\n   * @method _getCurrentRouteTrigger\n   * @memberOf EventRouter\n   * @returns {Array}\n   */\n  _getCurrentRouteTrigger() {\n    return _.last(this._routeArgs) || [];\n  },\n\n  /**\n   * Pops the latests route triggered off of the store stack\n   *\n   * @private\n   * @method _clearRouteTrigger\n   * @memberOf EventRouter\n   */\n  _clearRouteTrigger() {\n    this._routeArgs.pop();\n  },\n\n  /**\n   * Checks to see if the current event being tests is the latest\n   * route being handled by comparing the route name and arguments\n   *\n   * @private\n   * @method _isTriggeredFromRoute\n   * @memberOf EventRouter\n   * @returns {Boolean}\n   */\n  _isTriggeredFromRoute() {\n    const currentRoute = this._getCurrentRouteTrigger();\n\n    if(arguments.length !== currentRoute.length) {\n      return false;\n    }\n\n    return (arguments.length === _.union(arguments, this.currentRoute).length);\n  },\n\n  /**\n   * Takes a event string and any arguments passed to that event\n   * And if not initiated by a route, translates the event into a\n   * URL and navigates to it without re-triggering the route\n   *\n   * @public\n   * @method navigateFromEvent\n   * @param {String} event - Event string\n   * @event EventRouter#noMatch - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  navigateFromEvent(event) {\n    const route = this.getDefaultRoute(event);\n\n    // if no matching route exists do nothing\n    if(!route) {\n      const args = _.drop(arguments, 0);\n      this.trigger.apply(this, ['noMatch'].concat(args));\n      return this;\n    }\n\n    if(this._isTriggeredFromRoute.apply(this, arguments)) {\n      return this;\n    }\n\n    const eventArgs = _.drop(arguments, 1);\n\n    const translatedRoute = this.translateRoute(route, eventArgs);\n\n    // update URL without triggering the route\n    return this.navigate(translatedRoute, { trigger: false });\n  },\n\n  /**\n   * Get the default route string\n   * Either the first of the array or the passed in event if singular\n   *\n   * @public\n   * @method getDefaultRoute\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  getDefaultRoute(event) {\n    const routes = this._routeTriggers[event];\n\n    return _.isArray(routes) ? routes[0] : routes;\n  },\n\n  /**\n   * Finds the next name params (ie: :param) and replaces it with the arg\n   *\n   * @private\n   * @method _replaceParam\n   * @param {String} route - Route string\n   * @param {String|Number} arg - value to replace named param\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  _replaceParam(route, arg) {\n    return route.replace(namedParamRegex, arg);\n  },\n\n  /**\n   * Takes a route string and an array or arguments\n   * and returns a url with the named params replaced with the argument values\n   *\n   * @public\n   * @method translateRoute\n   * @param {String} route - Route string\n   * @param {Array} eventArgs - Passed event arguments\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  translateRoute(route, eventArgs) {\n    return _.reduce(eventArgs, this._replaceParam, route);\n  }\n});\n\nexport default EventRouter;\n"],"names":["namedParamRegex","EventRouter","Backbone","Router","extend","constructor","options","_","pick","_ch","Radio","channel","result","listenTo","navigateFromEvent","apply","arguments","_initRoutes","channelName","getChannel","_routeTriggers","each","_addRouteTrigger","routes","event","isArray","route","bind","trigger","addRouteTrigger","name","callback","bbRoute","prototype","isFunction","call","wrappedCallback","args","drop","concat","_storeRouteTrigger","_clearRouteTrigger","_routeArgs","push","_getCurrentRouteTrigger","last","pop","_isTriggeredFromRoute","currentRoute","length","union","getDefaultRoute","eventArgs","translatedRoute","translateRoute","navigate","_replaceParam","arg","replace","reduce"],"mappings":"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","sourceRoot":"/source/"}