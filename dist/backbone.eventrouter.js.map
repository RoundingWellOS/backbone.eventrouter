{"version":3,"file":"backbone.eventrouter.js","sources":["src/backbone.eventrouter.js"],"sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Radio from 'backbone.radio'; // eslint-disable-line\n\n// https://github.com/jashkenas/backbone/blob/1.2.1/backbone.js#L1425\nconst namedParamRegex = /(\\(\\?)?:\\w+/;\n\n/**\n * Backbone.Router coupled with a Backbone.Radio Channel.\n *\n * @public\n * @class EventRouter\n * @memberOf Backbone\n */\nconst EventRouter = Backbone.EventRouter = Backbone.Router.extend({\n\n  /**\n   * @public\n   * @constructs EventRouter\n   * @param {Object} [options] - Settings for the EventRouter\n   * @param {Boolean} [options.channelName]\n   * @param {Boolean} [options.routeTriggers]\n   */\n  constructor(options) {\n    _.extend(this, _.pick(options, ['channelName', 'routeTriggers']));\n\n    this.cid = _.uniqueId('bber');\n\n    this._ch = Backbone.Radio.channel(_.result(this, 'channelName'));\n\n    this.listenTo(this._ch, 'all', this.navigateFromEvent);\n\n    // Backbone.Router routes are added first\n    // Routes can be added after the triggerRoutes with the Backbone.Router API\n    Backbone.Router.apply(this, arguments);\n\n    this._initRoutes();\n  },\n\n  /**\n   * The Radio Channel name.\n   *\n   * @type {String}\n   * @default 'event-router'\n   */\n  channelName: 'event-router',\n\n  /**\n   * Get the router's Radio channel instance\n   *\n   * @public\n   * @method getChannel\n   * @memberOf EventRouter\n   * @returns {Backbone.Radio.Channel}\n   */\n  getChannel() {\n    return this._ch;\n  },\n\n  /**\n   * For each routeTrigger it adds a route to Backbone.Router\n   *\n   * @private\n   * @method _initRoutes\n   * @memberOf EventRouter\n   */\n  _initRoutes() {\n    this._routeTriggers = _.result(this, 'routeTriggers', {});\n\n    _.each(this._routeTriggers, this._addRouteTrigger, this);\n  },\n\n  /**\n   * Adds a route(s) to Backbone.Router which on route triggers\n   * the appropriate event\n   *\n   * @private\n   * @method _addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   */\n  _addRouteTrigger(routes, event) {\n    // handle any route as an array by default for the _.each\n    routes = _.isArray(routes) ? routes : [routes];\n\n    _.each(routes, function(route) {\n      this.route(route, event, _.bind(this._ch.trigger, this._ch, event));\n    }, this);\n  },\n\n  /**\n   * Adds a routeTrigger, and route(s) to Backbone.Router\n   * which on route triggers the appropriate event.\n   *\n   * @public\n   * @method addRouteTrigger\n   * @param {Array|String} routes - Route string or array of route strings\n   * @param {String} event - Event string to trigger on route\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  addRouteTrigger(routes, event) {\n    this._routeTriggers[event] = routes;\n    this._addRouteTrigger(routes, event);\n\n    return this;\n  },\n\n  /**\n   * Overrides `Backbone.Router.route()\n   * Like Backbone.Router.Route but with before events\n   * It also temporarily stores the event for understanding\n   * what route is currently being handled.\n   *\n   * @public\n   * @method route\n   * @param {String} route - Route string\n   * @param {String} [name] - Name of route\n   * @param {String} callback - Function called on route\n   * @event EventRouter#before:route - passes route name and route arguments\n   * @event EventRouter#before:route:{event_name} - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  route(route, name, callback) {\n    const bbRoute = Backbone.Router.prototype.route;\n\n    if(_.isFunction(name) || !callback) {\n      route = bbRoute.call(this, route, name, callback);\n      Backbone.history.handlers[0].cid = this.cid;\n      return route;\n    }\n\n    const wrappedCallback = _.bind(function() {\n      const args = _.drop(arguments, 0);\n\n      // Trigger before: events that match currently triggered events\n      this.trigger('before:route', name, args);\n      this.trigger.apply(this, [`before:route:${ name }`].concat(args));\n\n      this._storeRouteTrigger([name].concat(args));\n      callback.apply(this, args);\n      this._clearRouteTrigger();\n    }, this);\n\n    route = bbRoute.call(this, route, name, wrappedCallback);\n    Backbone.history.handlers[0].cid = this.cid;\n    return route;\n  },\n\n  /**\n   * Stores the route name and route arguments on a stack\n   *\n   * @private\n   * @method _storeRouteTrigger\n   * @param {Array} args - Array of route name and route arguments\n   * @memberOf EventRouter\n   */\n  _storeRouteTrigger(args) {\n    this._routeArgs = this._routeArgs || [];\n    this._routeArgs.push(args);\n  },\n\n\n  /**\n   * Gets the top of the triggered route store stack\n   *\n   * @private\n   * @method _getCurrentRouteTrigger\n   * @memberOf EventRouter\n   * @returns {Array}\n   */\n  _getCurrentRouteTrigger() {\n    return _.last(this._routeArgs) || [];\n  },\n\n  /**\n   * Pops the latests route triggered off of the store stack\n   *\n   * @private\n   * @method _clearRouteTrigger\n   * @memberOf EventRouter\n   */\n  _clearRouteTrigger() {\n    this._routeArgs.pop();\n  },\n\n  /**\n   * Checks to see if the current event being tests is the latest\n   * route being handled by comparing the route name and arguments\n   *\n   * @private\n   * @method _isTriggeredFromRoute\n   * @memberOf EventRouter\n   * @returns {Boolean}\n   */\n  _isTriggeredFromRoute() {\n    const currentRoute = this._getCurrentRouteTrigger();\n\n    if(arguments.length !== currentRoute.length) {\n      return false;\n    }\n\n    return (arguments.length === _.union(arguments, currentRoute).length);\n  },\n\n  /**\n   * Takes a event string and any arguments passed to that event\n   * And if not initiated by a route, translates the event into a\n   * URL and navigates to it without re-triggering the route\n   *\n   * @public\n   * @method navigateFromEvent\n   * @param {String} event - Event string\n   * @event EventRouter#noMatch - passes route arguments\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  navigateFromEvent(event) {\n    const route = this.getDefaultRoute(event);\n\n    // if no matching route exists do nothing\n    if(!route) {\n      const args = _.drop(arguments, 0);\n      this.trigger.apply(this, ['noMatch'].concat(args));\n      return this;\n    }\n\n    if(this._isTriggeredFromRoute.apply(this, arguments)) {\n      return this;\n    }\n\n    const eventArgs = _.drop(arguments, 1);\n\n    const translatedRoute = this.translateRoute(route, eventArgs);\n\n    // update URL without triggering the route\n    return this.navigate(translatedRoute, { trigger: false });\n  },\n\n  /**\n   * Get the default route string\n   * Either the first of the array or the passed in event if singular\n   *\n   * @public\n   * @method getDefaultRoute\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  getDefaultRoute(event) {\n    const routes = this._routeTriggers[event];\n\n    return _.isArray(routes) ? routes[0] : routes;\n  },\n\n  /**\n   * Finds the next name params (ie: :param) and replaces it with the arg\n   *\n   * @private\n   * @method _replaceParam\n   * @param {String} route - Route string\n   * @param {String|Number} arg - value to replace named param\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  _replaceParam(route, arg) {\n    return route.replace(namedParamRegex, arg);\n  },\n\n  /**\n   * Takes a route string and an array or arguments\n   * and returns a url with the named params replaced with the argument values\n   *\n   * @public\n   * @method translateRoute\n   * @param {String} route - Route string\n   * @param {Array} eventArgs - Passed event arguments\n   * @memberOf EventRouter\n   * @returns {String}\n   */\n  translateRoute(route, eventArgs) {\n    return _.reduce(eventArgs, this._replaceParam, route);\n  },\n\n  /**\n   * Destroys the eventrouter and removes any registered route handlers.\n   *\n   * @public\n   * @method destroy\n   * @memberOf EventRouter\n   * @returns {EventRouter}\n   */\n  destroy() {\n    Backbone.history.handlers = _.reject(Backbone.history.handlers, { cid: this.cid });\n    this.stopListening();\n    this.trigger('destroy', this);\n    return this;\n  }\n});\n\nexport default EventRouter;\n\n"],"names":["namedParamRegex","EventRouter","Backbone","Router","extend","constructor","options","_","pick","cid","uniqueId","_ch","Radio","channel","result","listenTo","navigateFromEvent","apply","arguments","_initRoutes","channelName","getChannel","_routeTriggers","each","_addRouteTrigger","routes","event","isArray","route","bind","trigger","addRouteTrigger","name","callback","bbRoute","prototype","isFunction","call","history","handlers","wrappedCallback","args","drop","concat","_storeRouteTrigger","_clearRouteTrigger","_routeArgs","push","_getCurrentRouteTrigger","last","pop","_isTriggeredFromRoute","currentRoute","length","union","getDefaultRoute","eventArgs","translatedRoute","translateRoute","navigate","_replaceParam","arg","replace","reduce","destroy","reject","stopListening"],"mappings":"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","sourceRoot":"/source/"}